<?php
/*
 |-----------------------------------------------------------|
 | //////////////////  ATTENTION  ////////////////////////// |
 |-----------------------------------------------------------|
 |                                                           |
 | This file is automatically generated.                     |
 | All changes made will be lost when updating the library.  |
 |                                                           |
 |                                                           |
 |-----------------------------------------------------------|
 | ///////////////////  ВНИМАНИЕ  ////////////////////////// |
 |-----------------------------------------------------------|
 |                                                           |
 | Этот файл сгенерирован автоматически                      |
 | Все внесенные изменения будут потеряны при обновлении.    |
 |                                                           |
 |                                                           |
 |-----------------------------------------------------------|
 */

namespace App\Commands\Hlogin;

use Hleb\Constructor\Handlers\Key;
use Phphleb\Hlogin\App\HloginUserModel;
use Phphleb\Hlogin\App\HloginUserLogModel;
use Phphleb\Hlogin\App\Main;
use Phphleb\Hlogin\App\OriginData;

class CreateLoginTableTask extends \Hleb\Scheme\App\Commands\MainTask
{
    // php console hlogin/create-login-table-task

    const DESCRIPTION = "Create tables for login";

    protected function execute() {
        $email = $this->action("Enter Administrator E-mail", "Wrong format [E-mail]" .  PHP_EOL, OriginData::EMAIL_PATTERN);
        $password = $this->action("Enter Administrator password", "Wrong format [password]"  . PHP_EOL, OriginData::PASSWORD_PATTERN);
        try {
            HloginUserModel::createRegisterTable();
        } catch (\Exception $e) {
            die($e->getMessage() .  PHP_EOL);
        }
        echo "Create table: `" . Main::getTableName() . "`" .  PHP_EOL;
        try {
            HloginUserLogModel::createRegisterLogTable();
        } catch (\Exception $e) {
            die($e->getMessage() .  PHP_EOL);
        }
        echo "Create table: `userlogs`" .  PHP_EOL;
        try {
            if (!HloginUserModel::createAdmin($email, password_hash($password . Key::get(), PASSWORD_DEFAULT), $this->createHash($email), $this->createHash($email))) {
                die("Failed to create Admin `" . $email . "`" .  PHP_EOL);
            }
        } catch (\Exception $e) {
            die($e->getMessage() .  PHP_EOL);
        }
        echo "Create Admin `" . $email . "`" .  PHP_EOL;

        echo  PHP_EOL . __CLASS__ . " done." .  PHP_EOL;
    }

    private function action(string $text, string $error, string $pattern) {
        $str = readline($text . '>');
        if (preg_match($pattern, $str)) return $str;
        print $error;
        return $this->action($text, $error, $pattern);
    }

    private function createHash(string $value) {
        return md5($value) . "-" . str_shuffle(md5(rand()) . md5(rand()));
    }

}

